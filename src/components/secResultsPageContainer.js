import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, useState, useRef } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { CMPResults } from "./cmpResults";
import { CMPResultFiltersSheet } from "./cmpResultFiltersSheet";
import { applyFilters, isFilterActive, countActiveFilters, defaultFilters, } from "../resultsFiltering";
import { mockCarpool, mockBuses, mockTrains, mockCarriers, } from "../mobility-mock";
import { computeCarrierCounts } from "../carrierCounts";
import { mockCarpoolDetail, mockBusDetail, mockTrainDetail, } from "./secDetailsPageContainer";
export function SECResultsPageContainer({ onBack }) {
    const topRef = useRef(null);
    const [sp] = useSearchParams();
    const navigate = useNavigate();
    const from = sp.get("from") ?? "";
    const to = sp.get("to") ?? "";
    const whenISO = sp.get("when") ?? undefined;
    const [filtersOpen, setFiltersOpen] = useState(false);
    const [filters, setFilters] = useState(defaultFilters);
    const active = isFilterActive(filters);
    const activeCount = countActiveFilters(filters);
    const resetAll = () => setFilters(defaultFilters);
    // üëá —Å—Ç–∞–Ω –¥–µ—Ç–∞–ª–∫–∏:
    const [detailMode, setDetailMode] = useState(null);
    const [detailOffer, setDetailOffer] = useState(undefined);
    const [detailLoading, setDetailLoading] = useState(false);
    const [detailEntryPoint, setDetailEntryPoint] = useState("card");
    // –∑–±–µ—Ä–µ–∂–µ–º–æ –ø–æ–∑–∏—Ü—ñ—é —Å–∫—Ä–æ–ª—É, —â–æ–± –∞–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —ñ–∑ details
    const scrollYRef = useRef(0);
    // üí° –¢—É—Ç ¬´—Å–∏—Ä–µ¬ª –¥–∂–µ—Ä–µ–ª–æ (API –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É), –ø–æ–∫–∏ ‚Äî –º–æ–∫–∏
    const raw = {
        carpool: mockCarpool,
        buses: mockBuses,
        trains: mockTrains,
    };
    // üß† –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ
    const filtered = useMemo(() => applyFilters(filters, raw), [filters, raw]);
    // –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –ø–æ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞—Ö (–±–µ–∑ carrier-—Ñ—ñ–ª—å—Ç—Ä—ñ–≤)
    const carrierCounts = useMemo(() => computeCarrierCounts(raw, filters), [raw, filters]);
    // –ó–±–∞–≥–∞—á–µ–Ω—ñ –æ–ø—Ü—ñ—ó –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏
    const carrierOptionsWithCounts = useMemo(() => mockCarriers.map((opt) => {
        const count = carrierCounts[opt.id] ?? 0;
        return { ...opt, count, disabled: count === 0 };
    }), [carrierCounts]);
    const onApplyFilters = (next) => {
        setFilters(next);
        setFiltersOpen(false);
        // üîΩ –¥–æ—á–µ–∫–∞—Ç–∏—Å—å –∑–∞–∫—Ä–∏—Ç—Ç—è —à–∏—Ç–∞ –π –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏
        requestAnimationFrame(() => {
            topRef.current?.scrollIntoView({
                behavior: "smooth",
                block: "start",
            });
            // –∞–±–æ: window.scrollTo({ top: 0, behavior: "smooth" });
        });
    };
    const onSortChange = (key) => {
        setFilters((f) => ({ ...f, sort: key }));
        // (–æ–ø—Ü—ñ–π–Ω–æ) —Å–∫—Ä–æ–ª –¥–æ–≥–æ—Ä–∏ —ñ –ø—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ:
        requestAnimationFrame(() => {
            topRef.current?.scrollIntoView({
                behavior: "smooth",
                block: "start",
            });
        });
    };
    // üîë –í–ê–ñ–õ–ò–í–û: –≤–∏–∑–Ω–∞—á–∞—î–º–æ onOpenDetail —Ç—É—Ç
    const onOpenDetail = (mode, id, entryPoint) => {
        const qs = new URLSearchParams({
            entry: entryPoint,
            from,
            to,
            when: whenISO ?? "",
        });
        navigate(`/mobility/carpool/detail/${mode}/${id}?${qs.toString()}`);
    };
    return (_jsxs(_Fragment, { children: [_jsx("div", { ref: topRef }), _jsx(CMPResults, { modeLabel: "\u041F\u0456\u0434\u0441\u0430\u0434\u043A\u0430 / \u0410\u0432\u0442\u043E\u0431\u0443\u0441 / \u0417\u0430\u043B\u0456\u0437\u043D\u0438\u0446\u044F", from: from, to: to, whenISO: whenISO, carpool: filtered.carpool, buses: filtered.buses, trains: filtered.trains, onOpenFilters: () => setFiltersOpen(true), onSortChange: onSortChange, 
                // üîπ –ø—Ä–æ–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –î–û cmpResults
                filters: filters, onFiltersChange: setFilters, onBack: onBack, filtersActive: active, filtersActiveCount: activeCount, onClearAllFilters: resetAll, onOpenDetail: onOpenDetail }), _jsx(CMPResultFiltersSheet, { open: filtersOpen, onClose: () => setFiltersOpen(false), value: filters, onApply: onApplyFilters, carrierOptions: mockCarriers })] }));
}
// ================== –ú–æ–∫–∏ detail –∑–∞ id ==================
function getMockDetailById(mode, id) {
    if (mode === "carpool") {
        // —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —á–∏–º–æ—Å—å —Å—Ö–æ–∂–∏–º —É —Å–ø–∏—Å–∫—É —ñ –∑—ñ–±—Ä–∞—Ç–∏ detail
        // —Ç—É—Ç –¥–ª—è –¥–µ–º–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ –∑–∞–≥–æ—Ç–æ–≤–∫—É
        return { ...mockCarpoolDetail, id };
    }
    if (mode === "bus") {
        return { ...mockBusDetail, id };
    }
    return { ...mockTrainDetail, id };
}
