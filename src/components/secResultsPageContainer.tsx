import { useMemo, useState, useRef } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { CMPResults } from "./cmpResults";
import { CMPResultFiltersSheet } from "./cmpResultFiltersSheet";

import {
  applyFilters,
  isFilterActive,
  countActiveFilters,
  defaultFilters,
  type ResultFilters,
} from "../resultsFiltering";

import {
  mockCarpool,
  mockBuses,
  mockTrains,
  mockCarriers,
} from "../mobility-mock";



export function SECResultsPageContainer({ onBack }: { onBack: () => void }) {
  const topRef = useRef<HTMLDivElement | null>(null);
  const [sp] = useSearchParams();
  const navigate = useNavigate();

  const from = sp.get("from") ?? "";
  const to = sp.get("to") ?? "";
  const whenISO = sp.get("when") ?? undefined;

  const [filtersOpen, setFiltersOpen] = useState(false);
  const [filters, setFilters] = useState<ResultFilters>(defaultFilters);

  const active = isFilterActive(filters);
  const activeCount = countActiveFilters(filters);

  const resetAll = () => setFilters(defaultFilters);

  // üëá —Å—Ç–∞–Ω –¥–µ—Ç–∞–ª–∫–∏:

  // üí° –¢—É—Ç ¬´—Å–∏—Ä–µ¬ª –¥–∂–µ—Ä–µ–ª–æ (API –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É), –ø–æ–∫–∏ ‚Äî –º–æ–∫–∏
  const raw = {
    carpool: mockCarpool,
    buses: mockBuses,
    trains: mockTrains,
  };

  // üß† –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ
  const filtered = useMemo(() => applyFilters(filters, raw), [filters, raw]);



  const onApplyFilters = (next: ResultFilters) => {
    setFilters(next);
    setFiltersOpen(false);
    // üîΩ –¥–æ—á–µ–∫–∞—Ç–∏—Å—å –∑–∞–∫—Ä–∏—Ç—Ç—è —à–∏—Ç–∞ –π –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏
    requestAnimationFrame(() => {
      topRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
      // –∞–±–æ: window.scrollTo({ top: 0, behavior: "smooth" });
    });
  };

  const onSortChange = (key: string) => {
    setFilters((f) => ({ ...f, sort: key as any }));
    // (–æ–ø—Ü—ñ–π–Ω–æ) —Å–∫—Ä–æ–ª –¥–æ–≥–æ—Ä–∏ —ñ –ø—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ:
    requestAnimationFrame(() => {
      topRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    });
  };

  // üîë –í–ê–ñ–õ–ò–í–û: –≤–∏–∑–Ω–∞—á–∞—î–º–æ onOpenDetail —Ç—É—Ç
  const onOpenDetail = (
    mode: "carpool" | "bus" | "train",
    id: string,
    entryPoint: "card" | "primaryCta",
  ) => {
    const qs = new URLSearchParams({
      entry: entryPoint,
      from,
      to,
      when: whenISO ?? "",
    });
    navigate(`/mobility/carpool/detail/${mode}/${id}?${qs.toString()}`);
  };

  return (
    <>
      {/* üîñ –Ø–∫—ñ—Ä –¥–ª—è —Å–∫—Ä–æ–ª—É */}
      <div ref={topRef} />
      <CMPResults
        modeLabel="–ü—ñ–¥—Å–∞–¥–∫–∞ / –ê–≤—Ç–æ–±—É—Å / –ó–∞–ª—ñ–∑–Ω–∏—Ü—è"
        from={from}
        to={to}
        whenISO={whenISO}
        carpool={filtered.carpool} 
        buses={filtered.buses}
        trains={filtered.trains}
        onOpenFilters={() => setFiltersOpen(true)}
        onSortChange={onSortChange}
        // üîπ –ø—Ä–æ–∫–∏–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –î–û cmpResults
        filters={filters}
        onFiltersChange={setFilters}
        onBack={onBack} // üîë –æ—Ü–µ –¥–æ–∑–≤–æ–ª—è—î –≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
        filtersActive={active}
        filtersActiveCount={activeCount}
        onClearAllFilters={resetAll}
        onOpenDetail={onOpenDetail} /* üëà —Ç–µ–ø–µ—Ä —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä */
      />

      {/* Bottom sheet */}
      <CMPResultFiltersSheet
        open={filtersOpen}
        onClose={() => setFiltersOpen(false)}
        value={filters}
        onApply={onApplyFilters} // ‚¨ÖÔ∏è —Ç—É—Ç
        carrierOptions={mockCarriers}
      />
    </>
  );
}

